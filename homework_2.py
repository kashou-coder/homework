# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

first_list = [2, 5j, 0.5, 'dog', False]
print(first_list)
print(type(first_list))
print(type(first_list[0]))
print(type(first_list[1]))
print(type(first_list[2]))
print(type(first_list[3]))
print(type(first_list[4]))


# 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с
# индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

second_list = list(input("Введите любые символы и цифры через пробел (минимум 6): ").split())
print(second_list)
second_list[0], second_list[1] = second_list[1], second_list[0]
second_list[2], second_list[3] = second_list[3], second_list[2]
second_list[4], second_list[5] = second_list[5], second_list[4]
print(second_list)


# 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится
# месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

month = int(input("Введите порядковый номер месяца в году: "))
month_dict = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August',
              9:'September', 10:'October', 11:'November', 12:'December'}
if(month == 1):
    print(month_dict.get(1), ", на дворе зима")
elif(month == 2):
    print(month_dict.get(2), ", на дворе зима")
elif(month == 3):
    print(month_dict.get(3), ", на дворе весна")
elif(month == 4):
    print(month_dict.get(4), ", на дворе весна")
elif(month == 5):
    print(month_dict.get(5), ", на дворе весна")
elif (month == 6):
    print(month_dict.get(6), ", на дворе лето")
elif(month == 7):
    print(month_dict.get(7), ", на дворе лето")
elif(month == 8):
    print(month_dict.get(8), ", на дворе лето")
elif(month == 9):
    print(month_dict.get(9), ", на дворе осень")
elif(month == 10):
    print(month_dict.get(10), ", на дворе осень")
elif(month == 11):
    print(month_dict.get(11), ", на дворе осень")
elif(month == 12):
    print(month_dict.get(12), ", на дворе зима")
else:
    print('Нет такого месяца в году')

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
# Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

third_list = list(input("Введите введите строку чере пробел ").split())
for i, item in enumerate(third_list):
    print(i + 1, item[0:10])

#if (len(third_list[i])>10):
 #   print(third_list[i][0:10])

# 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
# У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы
# с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

fourth_list = [5, 2, 8, 4, 1, 3, 6, 9, 7]
rate = int(input("Введите элемент рейтинга от 1 до 9: "))
if (rate in fourth_list):
    fourth_list.append(rate)
fourth_list.sort()
fourth_list.reverse()
print(fourth_list)
# ! Кроме сортировки ничего больше почему-то не пришло, понимаю что противоречит условию


# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер
# товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]

af = input("Введите название товара ")
bf = input("Введите цену товара ")
сf = input("Введите количество товара ")
ef = input("Введите единицу измерения товара ")
charf = ("Название", af),
prf = ("Цена", bf),
cof = ("Количество", сf),
edf = ("ед", ef),
korf = charf + prf + cof + edf
korf= dict(korf)
vkorf = (1, korf)
at = input("Введите название второго товара ")
bt = input("Введите цену второго товара ")
сt = input("Введите количество второго товара ")
et = input("Введите единицу измерения второго товара ")
chart = ("Название", at),
prt = ("Цена", bt),
cot = ("Количество", сt),
edt = ("ед", et),
kort = chart + prt + cot + edt
kort= dict(kort)
vkort = (2, kort)
list_kort = [vkorf, vkort]
att = input("Введите название третьего товара ")
btt = input("Введите цену третьего товара ")
сtt = input("Введите количество третьего товара ")
ett = input("Введите единицу измерения третьего товара ")
chartt = ("Название", att),
prtt = ("Цена", btt),
cott = ("Количество", сtt),
edtt = ("ед", ett),
kortt = chartt + prtt + cott + edtt
kortt= dict(kortt)
vkortt = (3, kortt)
list_kort = [vkorf, vkort, vkortt]
print(list_kort)

# на дальше пока не хватило)))

